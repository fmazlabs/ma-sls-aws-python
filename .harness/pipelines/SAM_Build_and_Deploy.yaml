pipeline:
    name: SAM Build and Deploy
    identifier: SAM_Build_and_Deploy
    allowStageExecutions: false
    projectIdentifier: Serverless
    orgIdentifier: default
    tags: {}
    properties:
        ci:
            codebase:
                connectorRef: org.Github
                repoName: harness-sam-example
                build: <+input>
    stages:
        - stage:
              name: Build
              identifier: Build
              type: CI
              spec:
                  cloneCodebase: true
                  infrastructure:
                      type: KubernetesDirect
                      spec:
                          connectorRef: org.GKE
                          namespace: harness-builds
                          automountServiceAccountToken: true
                          nodeSelector: {}
                  sharedPaths:
                      - /var/run
                      - /var/lib/docker
                  serviceDependencies:
                      - identifier: DIND
                        name: DIND
                        type: Service
                        spec:
                            connectorRef: org.Dockerhub
                            image: docker:dind
                            privileged: true
                  execution:
                      steps:
                          - step:
                                type: Run
                                name: Check DIND
                                identifier: Check_DIND
                                spec:
                                    connectorRef: org.Dockerhub
                                    image: docker:dind
                                    command: |-
                                        while ! docker ps ;do
                                            echo "Docker not availble yet"
                                        done
                                            echo "Docker Service Ready"
                          - step:
                                type: Run
                                name: Unit Tests
                                identifier: Unit_Tests
                                spec:
                                    connectorRef: org.Dockerhub
                                    image: python:3.8-buster
                                    command: |-
                                        pip install pytest pytest-mock --user
                                        python -m pytest tests/ -v --junitxml="result.xml"
                                    reports:
                                        type: JUnit
                                        spec:
                                            paths:
                                                - "**/*.xml"
                          - step:
                                type: Run
                                name: SAM Build
                                identifier: SAM_Build
                                spec:
                                    connectorRef: org.Dockerhub
                                    image: <+Build.variables.SAM_BUILD_IMAGE>
                                    command: sam build
                                    envVariables:
                                        SAM_CLI_TELEMETRY: "0"
                                    resources:
                                        limits:
                                            memory: 1Gi
                                            cpu: "2"
                          - step:
                                type: Run
                                name: Integration Tests
                                identifier: Integration_Tests
                                spec:
                                    connectorRef: org.Dockerhub
                                    image: <+Build.variables.SAM_BUILD_IMAGE>
                                    command: sam local invoke HelloWorldFunction -e events/event.json
                                    envVariables:
                                        SAM_CLI_TELEMETRY: "0"
                          - step:
                                type: Run
                                name: SAM Package
                                identifier: SAM_Package
                                spec:
                                    connectorRef: org.Dockerhub
                                    image: <+Build.variables.SAM_BUILD_IMAGE>
                                    command: sam package --image-repository <+Build.variables.IMAGE_REPO> --output-template-file packaged.yaml --region <+Build.variables.AWS_REGION>
                                    envVariables:
                                        AWS_ACCESS_KEY_ID: <+secrets.getValue("AWS_ACCESS_KEY_ID")>
                                        AWS_SECRET_ACCESS_KEY: <+secrets.getValue("AWS_SECRET_ACCESS_KEY")>
                                        SAM_CLI_TELEMETRY: "0"
                                    resources:
                                        limits:
                                            memory: 1Gi
                                            cpu: "1"
                          - step:
                                type: S3Upload
                                name: S3Upload
                                identifier: S3Upload
                                spec:
                                    connectorRef: org.AWS
                                    region: <+Build.variables.AWS_REGION>
                                    bucket: <+Build.variables.S3_BUCKET>
                                    sourcePath: packaged.yaml
              variables:
                  - name: SAM_BUILD_IMAGE
                    type: String
                    value: amazon/aws-sam-cli-build-image-python3.8
                  - name: IMAGE_REPO
                    type: String
                    value: 759984737373.dkr.ecr.us-east-2.amazonaws.com/harness-sam
                  - name: S3_BUCKET
                    type: String
                    value: harness-sam
                  - name: AWS_REGION
                    type: String
                    value: us-east-2
        - stage:
              name: Deploy
              identifier: Deploy
              description: ""
              type: Deployment
              spec:
                  serviceConfig:
                      serviceRef: HelloWorldFunction
                      serviceDefinition:
                          type: Kubernetes
                          spec:
                              variables: []
                  infrastructure:
                      infrastructureDefinition:
                          type: KubernetesDirect
                          spec:
                              connectorRef: org.GKE
                              namespace: harness-deploy
                              releaseName: release-<+INFRA_KEY>
                      environmentRef: dev
                      allowSimultaneousDeployments: false
                  execution:
                      steps:
                          - step:
                                type: ShellScript
                                name: SAM Deploy
                                identifier: SAM_Deploy
                                spec:
                                    shell: Bash
                                    onDelegate: true
                                    source:
                                        type: Inline
                                        spec:
                                            script: |-
                                                export AWS_ACCESS_KEY_ID=<+secrets.getValue("AWS_ACCESS_KEY_ID")>
                                                export AWS_SECRET_ACCESS_KEY=<+secrets.getValue("AWS_SECRET_ACCESS_KEY")>
                                                export AWS_DEFAULT_REGION=<+pipeline.stages.Build.variables.AWS_REGION>
                                                export SAM_CLI_TELEMETRY=0

                                                workdir=/tmp
                                                src=s3://<+pipelinepipeline.stages.Build.variables.S3_BUCKET>/packaged.yaml
                                                dst=${workdir}/packaged.yaml

                                                aws s3 cp ${src} ${dst}
                                                sam deploy --template-file  ${dst} --image-repository <+pipeline.stages.Build.variables.IMAGE_REPO> --stack-name <+stage.variables.STACK_NAME> --capabilities CAPABILITY_IAM --region <+pipeline.stages.Build.variables.AWS_REGION>
                                                cat ${dst}
                                                aws cloudformation describe-stacks --stack-name <+stage.variables.STACK_NAME> --query 'Stacks[0].Outputs[?OutputKey==`HelloWorldApi`].OutputValue' --output text > api.txt

                                                export apiUrl=`cat api.txt`
                                    environmentVariables: []
                                    outputVariables:
                                        - name: apiUrl
                                          type: String
                                          value: apiUrl
                                    executionTarget: {}
                                timeout: 10m
                          - step:
                                type: Http
                                name: HTTP
                                identifier: HTTP
                                spec:
                                    method: GET
                                    headers: []
                                    outputVariables: []
                                    url: <+execution.steps.SAM_Deploy.output.outputVariables.apiUrl>
                                timeout: 10s
                      rollbackSteps:
                          - step:
                                type: ShellScript
                                name: Delete Stack
                                identifier: Delete_Stack
                                spec:
                                    shell: Bash
                                    onDelegate: true
                                    source:
                                        type: Inline
                                        spec:
                                            script: aws cloudformation delete-stack --stack-name <+stage.variables.STACK_NAME>
                                    environmentVariables: []
                                    outputVariables: []
                                    executionTarget: {}
                                timeout: 10m
              tags: {}
              failureStrategies:
                  - onFailure:
                        errors:
                            - AllErrors
                        action:
                            type: StageRollback
              variables:
                  - name: STACK_NAME
                    type: String
                    value: helloworld-serverless
